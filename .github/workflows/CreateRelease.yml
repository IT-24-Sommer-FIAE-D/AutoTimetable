name: Scheduled Run and Release

on:
  workflow_dispatch: # Erlaubt auch das manuelle Auslösen des Workflows

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code # Den `main` branch auschecken
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Change to gh_pages branch # Zum `gh_pages` branch wechseln
        run: |
          git checkout gh_pages

      - name: Get main.py from main branch # Die `main.py` und `requirements.txt` Dateien aus dem `main` branch holen
        run: |
          git checkout main -- ./main.py
          git checkout main -- ./requirements.txt

      - name: Set up Python # Python 3.x installieren
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies # Die benötigten Python Pakete installieren: Siehe `requirements.txt`
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run the script # Das Python Skript ausführen
        run: |
          python main.py
          echo "SCRIPT_EXIT_CODE=$?" >> $GITHUB_ENV
        continue-on-error: true

      - name: Delete `main.py` and `requirements.txt` # Die `main.py` und `requirements.txt` Dateien löschen und aus dem Staging entfernen, damit sie nicht im `gh_pages` branch landen.
        run: |
          rm main.py
          rm requirements.txt
          git reset -- ./main.py ./requirements.txt

      - name: Stage changes in docs and check for changes # Die Änderungen in `docs/` hinzufügen und prüfen, ob es Änderungen gibt
        id: changes
        run: |
          git add ./docs/
          if git diff --cached --quiet; then
            echo "no_changes=true" >> $GITHUB_ENV
          else
            echo "no_changes=false" >> $GITHUB_ENV
            git diff --cached --name-only > staged_files.txt
            # Export the changed files as a multiline environment variable
            echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
            cat staged_files.txt >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Commit and push changes to gh_pages branch # Die Änderungen in den `gh_pages` branch pushen, wenn es Änderungen gibt: Siehe `if: env.no_changes == 'false'`
        if: env.no_changes == 'false' && env.SCRIPT_EXIT_CODE == '0'
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add ./docs/
          git commit -m "Update docs in gh_pages branch"
          git push origin gh_pages --force

      - name: Create Release # Ein Release erstellen, wenn es Änderungen gibt: Siehe `if: env.no_changes == 'false'`
        if: env.no_changes == 'false' && env.SCRIPT_EXIT_CODE == '0'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "r${{ github.run_number }}"
          name: "Neuer Stundenplan veröffentlicht"
          body: "Es wurden neue oder geänderte Stundenpläne gefunden und es wurden die folgenden neuen/geänderten Stundenpläne veröffentlicht:"
          draft: false
          prerelease: false
          files: ${{ env.CHANGED_FILES }}
